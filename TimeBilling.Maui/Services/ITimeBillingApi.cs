// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>


using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

using TimeBilling.Contracts;

namespace GeneratedCode
{
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "0.8.4.0")]
    public partial interface ITimeBillingApi
    {
        [Headers("Accept: application/json")]
        [Get("/Customers/GetCustomers")]
        Task<ICollection<CustomerResponse>> GetCustomers();

        [Headers("Accept: application/json")]
        [Get("/Customers/GetCustomer/{customerId}")]
        Task<CustomerResponse> GetCustomer(int customerId);

        [Headers("Accept: application/json")]
        [Post("/Customers/CreateCustomer")]
        Task<CustomerResponse> CreateCustomer([Body] CreateCustomerCommand body);

        [Headers("Accept: application/json")]
        [Put("/Customers/UpdateCustomer")]
        Task<CustomerResponse> UpdateCustomer([Body] UpdateCustomerCommand body);

        [Headers("Accept: application/json")]
        [Delete("/Customers/DeleteCustomer/{customerId}")]
        Task<CustomerResponse> DeleteCustomer(int customerId);

        [Headers("Accept: application/json")]
        [Get("/People/GetPeople")]
        Task<ICollection<PersonResponse>> GetPeople();

        [Headers("Accept: application/json")]
        [Get("/People/GetPerson/{personId}")]
        Task<PersonResponse> GetPerson(int personId);

        [Headers("Accept: application/json")]
        [Post("/People/CreatePerson")]
        Task<PersonResponse> CreatePerson([Body] CreatePersonCommand body);

        [Headers("Accept: application/json")]
        [Put("/People/UpdatePerson")]
        Task<PersonResponse> UpdatePerson([Body] UpdatePersonCommand body);

        [Headers("Accept: application/json")]
        [Delete("/People/DeletePerson/{personId}")]
        Task<PersonResponse> DeletePerson(int personId);

        [Headers("Accept: application/json")]
        [Get("/Workloads/GetWorkloads")]
        Task<ICollection<WorkloadResponse>> GetWorkloads();

        [Headers("Accept: application/json")]
        [Get("/Workloads/GetWorkload/{workloadId}")]
        Task<WorkloadResponse> GetWorkload(int workloadId);

        [Headers("Accept: application/json")]
        [Get("/Workloads/GetWorkloadsByCustomer/{customerId}")]
        Task<ICollection<WorkloadResponse>> GetWorkloadsByCustomer(int customerId);

        [Headers("Accept: application/json")]
        [Get("/Workloads/GetWorkloadsByPerson/{personId}")]
        Task<ICollection<WorkloadResponse>> GetWorkloadsByPerson(int personId);

        [Headers("Accept: application/json")]
        [Post("/Workloads/BeginWorkload")]
        Task<WorkloadResponse> BeginWorkload([Body] BeginWorkloadCommand body);

        [Headers("Accept: application/json")]
        [Put("/Workloads/EndWorkload")]
        Task<WorkloadResponse> EndWorkload([Body] EndWorkloadCommand body);

        [Headers("Accept: application/json")]
        [Delete("/Workloads/DeleteWorkload/{workloadId}")]
        Task<WorkloadResponse> DeleteWorkload(int workloadId);


    }
}


////----------------------
//// <auto-generated>
////     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
//// </auto-generated>
////----------------------

//#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
//#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
//#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
//#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
//#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
//#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
//#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
//#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
//#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
//#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

//namespace GeneratedCode
//{
//    using System = global::System;

    

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
//    public partial class BeginWorkloadCommand
//    {

//        [JsonPropertyName("begin")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.DateTimeOffset Begin { get; set; }

//        [JsonPropertyName("personId")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public int PersonId { get; set; }

//        [JsonPropertyName("customerId")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public int CustomerId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
//    public partial class CreateCustomerCommand
//    {

//        [JsonPropertyName("name")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Name { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
//    public partial class CreatePersonCommand
//    {

//        [JsonPropertyName("name")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Name { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
//    public partial class CustomerResponse
//    {

//        [JsonPropertyName("customerId")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public int CustomerId { get; set; }

//        [JsonPropertyName("name")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Name { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
//    public partial class EndWorkloadCommand
//    {

//        [JsonPropertyName("workloadId")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public int WorkloadId { get; set; }

//        [JsonPropertyName("end")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.DateTimeOffset End { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
//    public partial class PersonResponse
//    {

//        [JsonPropertyName("personId")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public int PersonId { get; set; }

//        [JsonPropertyName("name")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Name { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
//    public partial class TimeSpan
//    {

//        [JsonPropertyName("ticks")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public long Ticks { get; set; }

//        [JsonPropertyName("days")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public int Days { get; set; }

//        [JsonPropertyName("hours")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public int Hours { get; set; }

//        [JsonPropertyName("milliseconds")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public int Milliseconds { get; set; }

//        [JsonPropertyName("microseconds")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public int Microseconds { get; set; }

//        [JsonPropertyName("nanoseconds")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public int Nanoseconds { get; set; }

//        [JsonPropertyName("minutes")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public int Minutes { get; set; }

//        [JsonPropertyName("seconds")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public int Seconds { get; set; }

//        [JsonPropertyName("totalDays")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public double TotalDays { get; set; }

//        [JsonPropertyName("totalHours")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public double TotalHours { get; set; }

//        [JsonPropertyName("totalMilliseconds")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public double TotalMilliseconds { get; set; }

//        [JsonPropertyName("totalMicroseconds")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public double TotalMicroseconds { get; set; }

//        [JsonPropertyName("totalNanoseconds")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public double TotalNanoseconds { get; set; }

//        [JsonPropertyName("totalMinutes")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public double TotalMinutes { get; set; }

//        [JsonPropertyName("totalSeconds")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public double TotalSeconds { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
//    public partial class UpdateCustomerCommand
//    {

//        [JsonPropertyName("customerId")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public int CustomerId { get; set; }

//        [JsonPropertyName("name")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Name { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
//    public partial class UpdatePersonCommand
//    {

//        [JsonPropertyName("personId")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public int PersonId { get; set; }

//        [JsonPropertyName("name")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public string Name { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
//    public partial class WorkloadResponse
//    {

//        [JsonPropertyName("workloadId")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public int WorkloadId { get; set; }

//        [JsonPropertyName("begin")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.DateTimeOffset Begin { get; set; }

//        [JsonPropertyName("end")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public System.DateTimeOffset? End { get; set; }

//        [JsonPropertyName("total")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public TimeSpan Total { get; set; }

//        [JsonPropertyName("person")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public PersonResponse Person { get; set; }

//        [JsonPropertyName("customer")]

//        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
//        public CustomerResponse Customer { get; set; }

//    }


//}

//#pragma warning restore  108
//#pragma warning restore  114
//#pragma warning restore  472
//#pragma warning restore  612
//#pragma warning restore 1573
//#pragma warning restore 1591
//#pragma warning restore 8073
//#pragma warning restore 3016
//#pragma warning restore 8603
//#pragma warning restore 8604
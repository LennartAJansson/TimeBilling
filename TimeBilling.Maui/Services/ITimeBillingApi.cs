// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>


using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

using TimeBilling.Common.Contracts;

namespace GeneratedCode
{
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "0.8.4.0")]
    public partial interface ITimeBillingApi
    {
        [Headers("Accept: application/json")]
        [Get("/Customers/GetCustomers")]
        Task<ICollection<CustomerResponse>> GetCustomers();

        [Headers("Accept: application/json")]
        [Get("/Customers/GetCustomer/{customerId}")]
        Task<CustomerResponse> GetCustomer(Guid customerId);

        [Headers("Accept: application/json")]
        [Post("/Customers/CreateCustomer")]
        Task<CustomerResponse> CreateCustomer([Body] CreateCustomerRequest body);

        [Headers("Accept: application/json")]
        [Put("/Customers/UpdateCustomer")]
        Task<CustomerResponse> UpdateCustomer([Body] UpdateCustomerRequest body);

        [Headers("Accept: application/json")]
        [Delete("/Customers/DeleteCustomer/{customerId}")]
        Task<CustomerResponse> DeleteCustomer(Guid customerId);

        [Headers("Accept: application/json")]
        [Get("/People/GetPeople")]
        Task<ICollection<PersonResponse>> GetPeople();

        [Headers("Accept: application/json")]
        [Get("/People/GetPerson/{personId}")]
        Task<PersonResponse> GetPerson(Guid personId);

        [Headers("Accept: application/json")]
        [Post("/People/CreatePerson")]
        Task<PersonResponse> CreatePerson([Body] CreatePersonRequest body);

        [Headers("Accept: application/json")]
        [Put("/People/UpdatePerson")]
        Task<PersonResponse> UpdatePerson([Body] UpdatePersonRequest body);

        [Headers("Accept: application/json")]
        [Delete("/People/DeletePerson/{personId}")]
        Task<PersonResponse> DeletePerson(Guid personId);

        [Headers("Accept: application/json")]
        [Get("/Workloads/GetWorkloads")]
        Task<ICollection<WorkloadResponse>> GetWorkloads();

        [Headers("Accept: application/json")]
        [Get("/Workloads/GetWorkload/{workloadId}")]
        Task<WorkloadResponse> GetWorkload(Guid workloadId);

        [Headers("Accept: application/json")]
        [Get("/Workloads/GetWorkloadsByCustomer/{customerId}")]
        Task<ICollection<WorkloadResponse>> GetWorkloadsByCustomer(Guid customerId);

        [Headers("Accept: application/json")]
        [Get("/Workloads/GetWorkloadsByPerson/{personId}")]
        Task<ICollection<WorkloadResponse>> GetWorkloadsByPerson(Guid personId);

        [Headers("Accept: application/json")]
        [Post("/Workloads/CreateWorkload")]
        Task<WorkloadResponse> CreateWorkload([Body] CreateWorkloadRequest body);

        [Headers("Accept: application/json")]
        [Put("/Workloads/UpdateWorkload")]
        Task<WorkloadResponse> UpdateWorkload([Body] UpdateWorkloadRequest body);

        [Headers("Accept: application/json")]
        [Delete("/Workloads/DeleteWorkload/{workloadId}")]
        Task<WorkloadResponse> DeleteWorkload(Guid workloadId);
    }
}
